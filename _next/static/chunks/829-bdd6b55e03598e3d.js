"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[829],{9886:function(e,a,l){l.d(a,{_:function(){return d}});var t=l(5893);l(7294);var n=l(1280),r=l(5117),u=l(5078),o=JSON.parse('{"Calendar":{"displayName":"@mantine/dates/Calendar","props":{"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: Date) => boolean"}},"firstDayOfWeek":{"defaultValue":null,"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek","value":[{"value":"0"},{"value":"1"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: Date) => string"}},"getDayProps":{"defaultValue":null,"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"(date: Date) => Partial<DayProps>"}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"defaultValue":null,"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":null,"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"level":{"defaultValue":null,"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"maxLevel":{"defaultValue":null,"description":"Max level that user can go up to (decade, year, month), defaults to decade","name":"maxLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"minLevel":{"defaultValue":null,"description":"Min level that user can go down to (decade, year, month), defaults to month","name":"minLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"monthLabelFormat":{"defaultValue":null,"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"(date: Date) => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"(date: Date) => void"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: Date) => ReactNode"}},"weekdayFormat":{"defaultValue":null,"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DateInput":{"displayName":"DateInput","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether value can be deselected when the user clicks on the selected date in the calendar or erases content of the input, true if clearable prop is set, false by default","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props added to clear button","name":"clearButtonProps","required":false,"type":{"name":"Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"key\\" | keyof ButtonHTMLAttributes<...>>"}},"clearable":{"defaultValue":null,"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"dateParser":{"defaultValue":null,"description":"Parses user input to convert it to Date object","name":"dateParser","required":false,"type":{"name":"(value: string) => Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: Date) => boolean"}},"firstDayOfWeek":{"defaultValue":null,"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek","value":[{"value":"0"},{"value":"1"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"fixOnBlur":{"defaultValue":null,"description":"Determines whether input value should be reverted to last known valid value on blur, true by default","name":"fixOnBlur","required":false,"type":{"name":"boolean"}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: Date) => string"}},"getDayProps":{"defaultValue":null,"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"(date: Date) => Partial<DayProps>"}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"defaultValue":null,"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":null,"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthLabelFormat":{"defaultValue":null,"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: Date) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"popoverProps":{"defaultValue":null,"description":"Props added to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"preserveTime":{"defaultValue":null,"description":"Determines whether time (hours, minutes, seconds and milliseconds) should be preserved when new date is picked, true by default","name":"preserveTime","required":false,"type":{"name":"boolean"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: Date) => ReactNode"}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date"}},"valueFormat":{"defaultValue":null,"description":"Dayjs format to display input value, \\"MMMM D, YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"defaultValue":null,"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatePicker":{"displayName":"@mantine/dates/DatePicker","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: Date) => boolean"}},"firstDayOfWeek":{"defaultValue":null,"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek","value":[{"value":"0"},{"value":"1"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: Date) => string"}},"getDayProps":{"defaultValue":null,"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"(date: Date) => Partial<DayProps>"}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"defaultValue":null,"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":null,"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"level":{"defaultValue":null,"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthLabelFormat":{"defaultValue":null,"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"(date: Date) => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"(date: Date) => void"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: Date) => ReactNode"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"default\\" | \\"multiple\\" | \\"range\\"","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"weekdayFormat":{"defaultValue":null,"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DatePickerInput":{"displayName":"@mantine/dates/DatePickerInput","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props added to clear button","name":"clearButtonProps","required":false,"type":{"name":"Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"key\\" | keyof ButtonHTMLAttributes<...>>"}},"clearable":{"defaultValue":null,"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":null,"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultLevel":{"defaultValue":null,"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"dropdownType":{"defaultValue":null,"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\"","value":[{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: Date) => boolean"}},"firstDayOfWeek":{"defaultValue":null,"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek","value":[{"value":"0"},{"value":"1"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: Date) => string"}},"getDayProps":{"defaultValue":null,"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"(date: Date) => Partial<DayProps>"}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"defaultValue":null,"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":null,"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"level":{"defaultValue":null,"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"defaultValue":null,"description":"Props added to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthLabelFormat":{"defaultValue":null,"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"(date: Date) => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"(date: Date) => void"}},"popoverProps":{"defaultValue":null,"description":"Props added to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"readOnly":{"defaultValue":null,"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: Date) => ReactNode"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"default\\" | \\"multiple\\" | \\"range\\"","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"valueFormat":{"defaultValue":null,"description":"Dayjs format to display input value, \\"MMMM D, YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"defaultValue":null,"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"DateTimePicker":{"displayName":"@mantine/dates/DateTimePicker","props":{"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props added to clear button","name":"clearButtonProps","required":false,"type":{"name":"Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"key\\" | keyof ButtonHTMLAttributes<...>>"}},"clearable":{"defaultValue":null,"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultLevel":{"defaultValue":null,"description":"Initial level displayed to the user (decade, year, month), used for uncontrolled component","name":"defaultLevel","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date"}},"dropdownType":{"defaultValue":null,"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\"","value":[{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"excludeDate":{"defaultValue":null,"description":"Callback function to determine whether the day should be disabled","name":"excludeDate","required":false,"type":{"name":"(date: Date) => boolean"}},"firstDayOfWeek":{"defaultValue":null,"description":"number 0-6, 0 – Sunday, 6 – Saturday, defaults to 1 – Monday","name":"firstDayOfWeek","required":false,"type":{"name":"0 | 1 | 2 | 3 | 4 | 5 | 6","raw":"DayOfWeek","value":[{"value":"0"},{"value":"1"},{"value":"2"},{"value":"3"},{"value":"4"},{"value":"5"},{"value":"6"}]}},"getDayAriaLabel":{"defaultValue":null,"description":"Assigns aria-label to days based on date","name":"getDayAriaLabel","required":false,"type":{"name":"(date: Date) => string"}},"getDayProps":{"defaultValue":null,"description":"Adds props to Day component based on date","name":"getDayProps","required":false,"type":{"name":"(date: Date) => Partial<DayProps>"}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"hideOutsideDates":{"defaultValue":null,"description":"Determines whether outside dates should be hidden, defaults to false","name":"hideOutsideDates","required":false,"type":{"name":"boolean"}},"hideWeekdays":{"defaultValue":null,"description":"Determines whether weekdays row should be hidden, defaults to false","name":"hideWeekdays","required":false,"type":{"name":"boolean"}},"level":{"defaultValue":null,"description":"Current level displayed to the user (decade, year, month), used for controlled component","name":"level","required":false,"type":{"name":"\\"month\\" | \\"year\\" | \\"decade\\"","raw":"CalendarLevel","value":[{"value":"\\"month\\""},{"value":"\\"year\\""},{"value":"\\"decade\\""}]}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"defaultValue":null,"description":"Props added to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthLabelFormat":{"defaultValue":null,"description":"dayjs label format to display month label or a function that returns month label based on month value, defaults to \\"MMMM YYYY\\"","name":"monthLabelFormat","required":false,"type":{"name":"string | ((month: Date) => ReactNode)"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: Date) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelChange":{"defaultValue":null,"description":"Called when level changes","name":"onLevelChange","required":false,"type":{"name":"(level: CalendarLevel) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onMonthMouseEnter":{"defaultValue":null,"description":"Called when mouse enters month control","name":"onMonthMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onMonthSelect":{"defaultValue":null,"description":"Called when user clicks month on year level","name":"onMonthSelect","required":false,"type":{"name":"(date: Date) => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"onYearMouseEnter":{"defaultValue":null,"description":"Called when mouse enters year control","name":"onYearMouseEnter","required":false,"type":{"name":"(event: MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void"}},"onYearSelect":{"defaultValue":null,"description":"Called when user clicks year on decade level","name":"onYearSelect","required":false,"type":{"name":"(date: Date) => void"}},"popoverProps":{"defaultValue":null,"description":"Props added to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"readOnly":{"defaultValue":null,"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"renderDay":{"defaultValue":null,"description":"Controls day value rendering","name":"renderDay","required":false,"type":{"name":"(date: Date) => ReactNode"}},"submitButtonProps":{"defaultValue":null,"description":"Props added to submit button","name":"submitButtonProps","required":false,"type":{"name":"ActionIconProps & Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"key\\" | keyof ButtonHTMLAttributes<...>>"}},"timeInputProps":{"defaultValue":null,"description":"TimeInput component props","name":"timeInputProps","required":false,"type":{"name":"TimeInputProps"}},"value":{"defaultValue":null,"description":"Controlled component value","name":"value","required":false,"type":{"name":"Date"}},"valueFormat":{"defaultValue":null,"description":"Dayjs format to display input value, \\"DD/MM/YYYY HH:mm\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"weekdayFormat":{"defaultValue":null,"description":"dayjs format for weekdays names, defaults to \\"dd\\"","name":"weekdayFormat","required":false,"type":{"name":"string"}},"weekendDays":{"defaultValue":null,"description":"Indices of weekend days, 0-6, where 0 is Sunday and 6 is Saturday, defaults to value defined in DatesProvider","name":"weekendDays","required":false,"type":{"name":"DayOfWeek[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"withSeconds":{"defaultValue":null,"description":"Determines whether seconds input should be rendered","name":"withSeconds","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"MonthPicker":{"displayName":"@mantine/dates/MonthPicker","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"default\\" | \\"multiple\\" | \\"range\\"","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"MonthPickerInput":{"displayName":"@mantine/dates/MonthPickerInput","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props added to clear button","name":"clearButtonProps","required":false,"type":{"name":"Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"key\\" | keyof ButtonHTMLAttributes<...>>"}},"clearable":{"defaultValue":null,"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":null,"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"dropdownType":{"defaultValue":null,"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\"","value":[{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"getMonthControlProps":{"defaultValue":null,"description":"Adds props to month picker control based on date","name":"getMonthControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"defaultValue":null,"description":"Props added to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"monthsListFormat":{"defaultValue":null,"description":"dayjs format for months list","name":"monthsListFormat","required":false,"type":{"name":"string"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"popoverProps":{"defaultValue":null,"description":"Props added to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"readOnly":{"defaultValue":null,"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"default\\" | \\"multiple\\" | \\"range\\"","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"valueFormat":{"defaultValue":null,"description":"Dayjs format to display input value, \\"MMMM YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearLabelFormat":{"defaultValue":null,"description":"dayjs label format to display year label or a function that returns year label based on year value, defaults to \\"YYYY\\"","name":"yearLabelFormat","required":false,"type":{"name":"string | ((year: Date) => ReactNode)"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"TimeInput":{"displayName":"@mantine/dates/TimeInput","props":{"withSeconds":{"defaultValue":null,"description":"Determines whether seconds input should be rendered","name":"withSeconds","required":false,"type":{"name":"boolean"}}}},"YearPicker":{"displayName":"@mantine/dates/YearPicker","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"default\\" | \\"multiple\\" | \\"range\\"","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}},"YearPickerInput":{"displayName":"@mantine/dates/YearPickerInput","props":{"allowDeselect":{"defaultValue":null,"description":"Determines whether user can deselect the date by clicking on selected item, applicable only when type=\\"default\\"","name":"allowDeselect","required":false,"type":{"name":"boolean"}},"allowSingleDateInRange":{"defaultValue":null,"description":"Determines whether single year can be selected as range, applicable only when type=\\"range\\"","name":"allowSingleDateInRange","required":false,"type":{"name":"boolean"}},"ariaLabels":{"defaultValue":null,"description":"aria-label attributes for controls on different levels","name":"ariaLabels","required":false,"type":{"name":"CalendarAriaLabels"}},"clearButtonProps":{"defaultValue":null,"description":"Props added to clear button","name":"clearButtonProps","required":false,"type":{"name":"Pick<DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, \\"key\\" | keyof ButtonHTMLAttributes<...>>"}},"clearable":{"defaultValue":null,"description":"Determines whether input value can be cleared, adds clear button to right section, false by default","name":"clearable","required":false,"type":{"name":"boolean"}},"closeOnChange":{"defaultValue":null,"description":"Determines whether dropdown should be closed when date is selected, not applicable when type=\\"multiple\\", true by default","name":"closeOnChange","required":false,"type":{"name":"boolean"}},"columnsToScroll":{"defaultValue":null,"description":"Number of columns to scroll when user clicks next/prev month, defaults to numberOfColumns","name":"columnsToScroll","required":false,"type":{"name":"number"}},"date":{"defaultValue":null,"description":"Date that is displayed, used for controlled component","name":"date","required":false,"type":{"name":"Date"}},"decadeLabelFormat":{"defaultValue":null,"description":"dayjs label format to display decade label or a function that returns decade label based on date value, defaults to \\"YYYY\\"","name":"decadeLabelFormat","required":false,"type":{"name":"string | ((startOfDecade: Date, endOfDecade: Date) => ReactNode)"}},"defaultDate":{"defaultValue":null,"description":"Initial date that is displayed, used for uncontrolled component","name":"defaultDate","required":false,"type":{"name":"Date"}},"defaultValue":{"defaultValue":null,"description":"Default value for uncontrolled component","name":"defaultValue","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"dropdownType":{"defaultValue":null,"description":"Type of dropdown, defaults to popover","name":"dropdownType","required":false,"type":{"name":"\\"popover\\" | \\"modal\\"","raw":"\\"popover\\" | \\"modal\\"","value":[{"value":"\\"popover\\""},{"value":"\\"modal\\""}]}},"getYearControlProps":{"defaultValue":null,"description":"Adds props to year picker control based on date","name":"getYearControlProps","required":false,"type":{"name":"(date: Date) => Partial<PickerControlProps>"}},"hasNextLevel":{"defaultValue":null,"description":"Determines whether next level button should be enabled, defaults to true","name":"hasNextLevel","required":false,"type":{"name":"boolean"}},"locale":{"defaultValue":null,"description":"dayjs locale, defaults to value defined in DatesProvider","name":"locale","required":false,"type":{"name":"string"}},"maxDate":{"defaultValue":null,"description":"Maximum possible date","name":"maxDate","required":false,"type":{"name":"Date"}},"minDate":{"defaultValue":null,"description":"Minimum possible date","name":"minDate","required":false,"type":{"name":"Date"}},"modalProps":{"defaultValue":null,"description":"Props added to Modal component","name":"modalProps","required":false,"type":{"name":"Partial<Omit<ModalProps, \\"children\\">>"}},"nextDisabled":{"defaultValue":null,"description":"Determines whether next control should be disabled, defaults to true","name":"nextDisabled","required":false,"type":{"name":"boolean"}},"nextIcon":{"defaultValue":null,"description":"Change next icon","name":"nextIcon","required":false,"type":{"name":"ReactNode"}},"nextLabel":{"defaultValue":null,"description":"aria-label for next button","name":"nextLabel","required":false,"type":{"name":"string"}},"numberOfColumns":{"defaultValue":null,"description":"Number of columns to render next to each other","name":"numberOfColumns","required":false,"type":{"name":"number"}},"onChange":{"defaultValue":null,"description":"Called when value changes","name":"onChange","required":false,"type":{"name":"(value: DatePickerValue<Type>) => void"}},"onDateChange":{"defaultValue":null,"description":"Called when date changes","name":"onDateChange","required":false,"type":{"name":"(date: Date) => void"}},"onLevelClick":{"defaultValue":null,"description":"Called when level button is clicked","name":"onLevelClick","required":false,"type":{"name":"() => void"}},"onNext":{"defaultValue":null,"description":"Called when next button is clicked","name":"onNext","required":false,"type":{"name":"() => void"}},"onPrevious":{"defaultValue":null,"description":"Called when previous button is clicked","name":"onPrevious","required":false,"type":{"name":"() => void"}},"popoverProps":{"defaultValue":null,"description":"Props added to Popover component","name":"popoverProps","required":false,"type":{"name":"Partial<Omit<PopoverProps, \\"children\\">>"}},"previousDisabled":{"defaultValue":null,"description":"Determines whether previous control should be disabled, defaults to true","name":"previousDisabled","required":false,"type":{"name":"boolean"}},"previousIcon":{"defaultValue":null,"description":"Change previous icon","name":"previousIcon","required":false,"type":{"name":"ReactNode"}},"previousLabel":{"defaultValue":null,"description":"aria-label for previous button","name":"previousLabel","required":false,"type":{"name":"string"}},"readOnly":{"defaultValue":null,"description":"Determines whether the user can modify the value","name":"readOnly","required":false,"type":{"name":"boolean"}},"type":{"defaultValue":null,"description":"Picker type: range, multiple or default","name":"type","required":false,"type":{"name":"\\"default\\" | \\"multiple\\" | \\"range\\"","raw":"DatePickerType","value":[{"value":"\\"default\\""},{"value":"\\"multiple\\""},{"value":"\\"range\\""}]}},"value":{"defaultValue":null,"description":"Value for controlled component","name":"value","required":false,"type":{"name":"Date | DatesRangeValue | Date[]"}},"valueFormat":{"defaultValue":null,"description":"Dayjs format to display input value, \\"YYYY\\" by default","name":"valueFormat","required":false,"type":{"name":"string"}},"withNext":{"defaultValue":null,"description":"Determines whether next control should be rendered, defaults to true","name":"withNext","required":false,"type":{"name":"boolean"}},"withPrevious":{"defaultValue":null,"description":"Determines whether previous control should be rendered, defaults to true","name":"withPrevious","required":false,"type":{"name":"boolean"}},"yearsListFormat":{"defaultValue":null,"description":"dayjs format for years list","name":"yearsListFormat","required":false,"type":{"name":"string"}}}}}');function d(e){var a=e.component,l=(0,n.rZ)();if(!o[a])return null;var d=Object.keys(o[a].props).map(function(e){var n=o[a].props[e];return(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{style:{whiteSpace:"nowrap"},children:[(0,t.jsx)(r.x,{component:"span",size:"sm",children:n.name}),n.required&&(0,t.jsxs)(r.x,{component:"sup",color:"red",size:"xs",children:[" ","*"]})]}),(0,t.jsx)("td",{style:{verticalAlign:"middle"},children:(0,t.jsx)(r.x,{color:"dark"===l.colorScheme?"red":"indigo",size:"xs",weight:500,sx:{fontFamily:"Menlo, Monaco, Lucida Console, monospace"},children:n.type.name})}),(0,t.jsx)("td",{children:(0,t.jsx)(r.x,{component:"span",size:"sm",children:n.description})})]},e)});return 0===d.length?(0,t.jsx)(r.x,{color:"dimmed",mb:"xl",children:"Nothing found"}):(0,t.jsx)("div",{style:{overflowX:"auto"},children:(0,t.jsx)("div",{style:{minWidth:500},children:(0,t.jsxs)(u.i,{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Name"}),(0,t.jsx)("th",{children:"Type"}),(0,t.jsx)("th",{children:"Description"})]})}),(0,t.jsx)("tbody",{children:d})]})})})}},6440:function(e,a,l){l.d(a,{od:function(){return f},Yc:function(){return m},no:function(){return s},SH:function(){return y},eH:function(){return p},ab:function(){return i},ng:function(){return h},Ki:function(){return c},yt:function(){return d}});var t=l(5893),n=l(7294),r=l(7564),u=l(5117),o=l(3517),d={type:"demo",component:function(){var e=(0,n.useState)(null),a=e[0],l=e[1],d=(0,n.useState)([]),i=d[0],s=d[1],m=(0,n.useState)([null,null]),p=m[0],c=m[1];return(0,t.jsxs)(r.K,{children:[(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick one value, current value: ",(0,t.jsx)("b",{children:a?a.getFullYear():"null"})]}),(0,t.jsx)(o.qi,{value:a,onChange:l})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick multiple values, current value:"," ",(0,t.jsx)("b",{children:i.length>0?i.map(function(e){return e.getFullYear()}).join(", "):"empty array"})]}),(0,t.jsx)(o.qi,{type:"multiple",value:i,onChange:s})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick range, current value:"," ",(0,t.jsx)("b",{children:p.length>0?p.map(function(e){return null==e?void 0:e.getFullYear()}).filter(function(e){return e}).join(" – "):"empty array"})]}),(0,t.jsx)(o.qi,{type:"range",value:p,onChange:c})]})]})},code:"\nimport { useState } from 'react';\nimport { Stack, Text } from '@mantine/core';\nimport { DatesRangeValue, DateValue, YearPicker } from 'mantine-dates-6';\n\nfunction Demo() {\n  const [singleValue, setSingleValue] = useState<DateValue>(null);\n  const [multipleDates, setMultipleDates] = useState<Date[]>([]);\n  const [rangeValue, setRangeValue] = useState<DatesRangeValue>([null, null]);\n\n  return (\n    <Stack>\n      <div>\n        <Text mb=\"sm\">\n          Pick one value, current value: <b>{singleValue ? singleValue.getFullYear() : 'null'}</b>\n        </Text>\n        <YearPicker value={singleValue} onChange={setSingleValue} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick multiple values, current value:{' '}\n          <b>\n            {multipleDates.length > 0\n              ? multipleDates.map((item) => item.getFullYear()).join(', ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <YearPicker type=\"multiple\" value={multipleDates} onChange={setMultipleDates} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick range, current value:{' '}\n          <b>\n            {rangeValue.length > 0\n              ? rangeValue\n                  .map((item) => item?.getFullYear())\n                  .filter((i) => i)\n                  .join(' – ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <YearPicker type=\"range\" value={rangeValue} onChange={setRangeValue} />\n      </div>\n    </Stack>\n  );\n}\n"},i={type:"demo",component:function(){var e=(0,n.useState)(null),a=e[0],l=e[1],d=(0,n.useState)([]),i=d[0],s=d[1],m=(0,n.useState)([null,null]),p=m[0],c=m[1];return(0,t.jsxs)(r.K,{children:[(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick one value, current value:"," ",(0,t.jsx)("b",{children:a?"".concat(a.getMonth(),"/").concat(a.getFullYear()):"null"})]}),(0,t.jsx)(o.lH,{value:a,onChange:l})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick multiple values, current value:"," ",(0,t.jsx)("b",{children:i.length>0?i.map(function(e){return"".concat(e.getMonth(),"/").concat(e.getFullYear())}).join(", "):"empty array"})]}),(0,t.jsx)(o.lH,{type:"multiple",value:i,onChange:s})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick range, current value:"," ",(0,t.jsx)("b",{children:p.filter(function(e){return e}).length>0?p.filter(function(e){return e}).map(function(e){return"".concat(null==e?void 0:e.getMonth(),"/").concat(null==e?void 0:e.getFullYear())}).join(" – "):"empty array"})]}),(0,t.jsx)(o.lH,{type:"range",value:p,onChange:c})]})]})},code:"\nimport { useState } from 'react';\nimport { Stack, Text } from '@mantine/core';\nimport { DatesRangeValue, DateValue, MonthPicker } from 'mantine-dates-6';\n\nfunction Demo() {\n  const [singleValue, setSingleValue] = useState<DateValue>(null);\n  const [multipleDates, setMultipleDates] = useState<Date[]>([]);\n  const [rangeValue, setRangeValue] = useState<DatesRangeValue>([null, null]);\n\n  return (\n    <Stack>\n      <div>\n        <Text mb=\"sm\">\n          Pick one value, current value:{' '}\n          <b>{singleValue ? `${singleValue.getMonth()}/${singleValue.getFullYear()}` : 'null'}</b>\n        </Text>\n        <MonthPicker value={singleValue} onChange={setSingleValue} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick multiple values, current value:{' '}\n          <b>\n            {multipleDates.length > 0\n              ? multipleDates.map((item) => `${item.getMonth()}/${item.getFullYear()}`).join(', ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <MonthPicker type=\"multiple\" value={multipleDates} onChange={setMultipleDates} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick range, current value:{' '}\n          <b>\n            {rangeValue.filter((i) => i).length > 0\n              ? rangeValue\n                  .filter((i) => i)\n                  .map((item) => `${item?.getMonth()}/${item?.getFullYear()}`)\n                  .join(' – ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <MonthPicker type=\"range\" value={rangeValue} onChange={setRangeValue} />\n      </div>\n    </Stack>\n  );\n}\n"},s={type:"demo",component:function(){var e=(0,n.useState)(null),a=e[0],l=e[1],d=(0,n.useState)([]),i=d[0],s=d[1],m=(0,n.useState)([null,null]),p=m[0],c=m[1];return(0,t.jsxs)(r.K,{children:[(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick one value, current value:"," ",(0,t.jsx)("b",{children:a?"".concat(a.getDate(),"/").concat(a.getMonth(),"/").concat(a.getFullYear()):"null"})]}),(0,t.jsx)(o.Mt,{value:a,onChange:l})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick multiple values, current value:"," ",(0,t.jsx)("b",{children:i.length>0?i.map(function(e){return"".concat(e.getDate(),"/").concat(e.getMonth(),"/").concat(e.getFullYear())}).join(", "):"empty array"})]}),(0,t.jsx)(o.Mt,{type:"multiple",value:i,onChange:s})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick range, current value:"," ",(0,t.jsx)("b",{children:p.filter(function(e){return e}).length>0?p.filter(function(e){return e}).map(function(e){return"".concat(null==e?void 0:e.getDate(),"/").concat(null==e?void 0:e.getMonth(),"/").concat(null==e?void 0:e.getFullYear())}).join(" – "):"empty array"})]}),(0,t.jsx)(o.Mt,{type:"range",value:p,onChange:c})]})]})},code:"\nimport { useState } from 'react';\nimport { Stack, Text } from '@mantine/core';\nimport { DatesRangeValue, DateValue, DatePicker } from 'mantine-dates-6';\n\nfunction Demo() {\n  const [singleValue, setSingleValue] = useState<DateValue>(null);\n  const [multipleDates, setMultipleDates] = useState<Date[]>([]);\n  const [rangeValue, setRangeValue] = useState<DatesRangeValue>([null, null]);\n\n  return (\n    <Stack>\n      <div>\n        <Text mb=\"sm\">\n          Pick one value, current value:{' '}\n          <b>{singleValue ? `${singleValue.getMonth()}/${singleValue.getFullYear()}` : 'null'}</b>\n        </Text>\n        <DatePicker value={singleValue} onChange={setSingleValue} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick multiple values, current value:{' '}\n          <b>\n            {multipleDates.length > 0\n              ? multipleDates.map((item) => `${item.getMonth()}/${item.getFullYear()}`).join(', ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <DatePicker type=\"multiple\" value={multipleDates} onChange={setMultipleDates} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick range, current value:{' '}\n          <b>\n            {rangeValue.filter((i) => i).length > 0\n              ? rangeValue\n                  .filter((i) => i)\n                  .map((item) => `${item?.getMonth()}/${item?.getFullYear()}`)\n                  .join(' – ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <DatePicker type=\"range\" value={rangeValue} onChange={setRangeValue} />\n      </div>\n    </Stack>\n  );\n}\n"},m={type:"demo",component:function(){var e=(0,n.useState)(null),a=e[0],l=e[1],d=(0,n.useState)([]),i=d[0],s=d[1],m=(0,n.useState)([null,null]),p=m[0],c=m[1];return(0,t.jsxs)(r.K,{children:[(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick one value, current value:"," ",(0,t.jsx)("b",{children:a?"".concat(a.getDate(),"/").concat(a.getMonth(),"/").concat(a.getFullYear()):"null"})]}),(0,t.jsx)(o.aj,{value:a,onChange:l,popoverProps:{withinPortal:!0}})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick multiple values, current value:"," ",(0,t.jsx)("b",{children:i.length>0?i.map(function(e){return"".concat(e.getDate(),"/").concat(e.getMonth(),"/").concat(e.getFullYear())}).join(", "):"empty array"})]}),(0,t.jsx)(o.aj,{type:"multiple",value:i,onChange:s,popoverProps:{withinPortal:!0}})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick range, current value:"," ",(0,t.jsx)("b",{children:p.filter(function(e){return e}).length>0?p.filter(function(e){return e}).map(function(e){return"".concat(null==e?void 0:e.getDate(),"/").concat(null==e?void 0:e.getMonth(),"/").concat(null==e?void 0:e.getFullYear())}).join(" – "):"empty array"})]}),(0,t.jsx)(o.aj,{type:"range",value:p,onChange:c,popoverProps:{withinPortal:!0}})]})]})},code:"\nimport { useState } from 'react';\nimport { Stack, Text } from '@mantine/core';\nimport { DatesRangeValue, DateValue, DatePickerInput } from 'mantine-dates-6';\n\nfunction Demo() {\n  const [singleValue, setSingleValue] = useState<DateValue>(null);\n  const [multipleDates, setMultipleDates] = useState<Date[]>([]);\n  const [rangeValue, setRangeValue] = useState<DatesRangeValue>([null, null]);\n\n  return (\n    <Stack>\n      <div>\n        <Text mb=\"sm\">\n          Pick one value, current value:{' '}\n          <b>{singleValue ? `${singleValue.getMonth()}/${singleValue.getFullYear()}` : 'null'}</b>\n        </Text>\n        <DatePickerInput value={singleValue} onChange={setSingleValue} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick multiple values, current value:{' '}\n          <b>\n            {multipleDates.length > 0\n              ? multipleDates.map((item) => `${item.getMonth()}/${item.getFullYear()}`).join(', ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <DatePickerInput type=\"multiple\" value={multipleDates} onChange={setMultipleDates} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick range, current value:{' '}\n          <b>\n            {rangeValue.filter((i) => i).length > 0\n              ? rangeValue\n                  .filter((i) => i)\n                  .map((item) => `${item?.getMonth()}/${item?.getFullYear()}`)\n                  .join(' – ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <DatePickerInput type=\"range\" value={rangeValue} onChange={setRangeValue} />\n      </div>\n    </Stack>\n  );\n}\n"},p={type:"demo",component:function(){var e=(0,n.useState)(null),a=e[0],l=e[1],d=(0,n.useState)([]),i=d[0],s=d[1],m=(0,n.useState)([null,null]),p=m[0],c=m[1];return(0,t.jsxs)(r.K,{children:[(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick one value, current value:"," ",(0,t.jsx)("b",{children:a?"".concat(a.getMonth(),"/").concat(a.getFullYear()):"null"})]}),(0,t.jsx)(o.Jf,{value:a,onChange:l,popoverProps:{withinPortal:!0}})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick multiple values, current value:"," ",(0,t.jsx)("b",{children:i.length>0?i.map(function(e){return"".concat(e.getMonth(),"/").concat(e.getFullYear())}).join(", "):"empty array"})]}),(0,t.jsx)(o.Jf,{type:"multiple",value:i,onChange:s,popoverProps:{withinPortal:!0}})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick range, current value:"," ",(0,t.jsx)("b",{children:p.filter(function(e){return e}).length>0?p.filter(function(e){return e}).map(function(e){return"".concat(null==e?void 0:e.getMonth(),"/").concat(null==e?void 0:e.getFullYear())}).join(" – "):"empty array"})]}),(0,t.jsx)(o.Jf,{type:"range",value:p,onChange:c,popoverProps:{withinPortal:!0}})]})]})},code:"\nimport { useState } from 'react';\nimport { Stack, Text } from '@mantine/core';\nimport { DatesRangeValue, DateValue, MonthPickerInput } from 'mantine-dates-6';\n\nfunction Demo() {\n  const [singleValue, setSingleValue] = useState<DateValue>(null);\n  const [multipleDates, setMultipleDates] = useState<Date[]>([]);\n  const [rangeValue, setRangeValue] = useState<DatesRangeValue>([null, null]);\n\n  return (\n    <Stack>\n      <div>\n        <Text mb=\"sm\">\n          Pick one value, current value:{' '}\n          <b>{singleValue ? `${singleValue.getMonth()}/${singleValue.getFullYear()}` : 'null'}</b>\n        </Text>\n        <MonthPickerInput value={singleValue} onChange={setSingleValue} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick multiple values, current value:{' '}\n          <b>\n            {multipleDates.length > 0\n              ? multipleDates.map((item) => `${item.getMonth()}/${item.getFullYear()}`).join(', ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <MonthPickerInput type=\"multiple\" value={multipleDates} onChange={setMultipleDates} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick range, current value:{' '}\n          <b>\n            {rangeValue.filter((i) => i).length > 0\n              ? rangeValue\n                  .filter((i) => i)\n                  .map((item) => `${item?.getMonth()}/${item?.getFullYear()}`)\n                  .join(' – ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <MonthPickerInput type=\"range\" value={rangeValue} onChange={setRangeValue} />\n      </div>\n    </Stack>\n  );\n}\n"},c={type:"demo",component:function(){var e=(0,n.useState)(null),a=e[0],l=e[1],d=(0,n.useState)([]),i=d[0],s=d[1],m=(0,n.useState)([null,null]),p=m[0],c=m[1];return(0,t.jsxs)(r.K,{children:[(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick one value, current value: ",(0,t.jsx)("b",{children:a?a.getFullYear():"null"})]}),(0,t.jsx)(o.wr,{value:a,onChange:l,popoverProps:{withinPortal:!0}})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick multiple values, current value:"," ",(0,t.jsx)("b",{children:i.length>0?i.map(function(e){return e.getFullYear()}).join(", "):"empty array"})]}),(0,t.jsx)(o.wr,{type:"multiple",value:i,onChange:s,popoverProps:{withinPortal:!0}})]}),(0,t.jsxs)("div",{children:[(0,t.jsxs)(u.x,{mb:"sm",children:["Pick range, current value:"," ",(0,t.jsx)("b",{children:p.length>0?p.map(function(e){return null==e?void 0:e.getFullYear()}).filter(function(e){return e}).join(" – "):"empty array"})]}),(0,t.jsx)(o.wr,{type:"range",value:p,onChange:c,popoverProps:{withinPortal:!0}})]})]})},code:"\nimport { useState } from 'react';\nimport { Stack, Text } from '@mantine/core';\nimport { DatesRangeValue, DateValue, YearPickerInput } from 'mantine-dates-6';\n\nfunction Demo() {\n  const [singleValue, setSingleValue] = useState<DateValue>(null);\n  const [multipleDates, setMultipleDates] = useState<Date[]>([]);\n  const [rangeValue, setRangeValue] = useState<DatesRangeValue>([null, null]);\n\n  return (\n    <Stack>\n      <div>\n        <Text mb=\"sm\">\n          Pick one value, current value: <b>{singleValue ? singleValue.getFullYear() : 'null'}</b>\n        </Text>\n        <YearPickerInput value={singleValue} onChange={setSingleValue} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick multiple values, current value:{' '}\n          <b>\n            {multipleDates.length > 0\n              ? multipleDates.map((item) => item.getFullYear()).join(', ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <YearPickerInput type=\"multiple\" value={multipleDates} onChange={setMultipleDates} />\n      </div>\n\n      <div>\n        <Text mb=\"sm\">\n          Pick range, current value:{' '}\n          <b>\n            {rangeValue.length > 0\n              ? rangeValue\n                  .map((item) => item?.getFullYear())\n                  .filter((i) => i)\n                  .join(' – ')\n              : 'empty array'}\n          </b>\n        </Text>\n        <YearPickerInput type=\"range\" value={rangeValue} onChange={setRangeValue} />\n      </div>\n    </Stack>\n  );\n}\n"},f={type:"demo",component:function(){return(0,t.jsx)("div",{style:{maxWidth:400,margin:"auto"},children:(0,t.jsx)(o.Wr,{placeholder:"Free date input",popoverProps:{withinPortal:!0}})})},code:"\nimport { DateInput } from 'mantine-dates-6';\n\nfunction Demo() {\n  return (\n    <div style={{ maxWidth: 400, margin: 'auto' }}>\n      <DateInput placeholder=\"Free date input\" />\n    </div>\n  );\n}\n"},y={type:"demo",component:function(){return(0,t.jsx)("div",{style:{maxWidth:400,margin:"auto"},children:(0,t.jsx)(o.xZ,{placeholder:"Pick date and time",popoverProps:{withinPortal:!0}})})},code:"\nimport { DateTimePicker } from 'mantine-dates-6';\n\nfunction Demo() {\n  return (\n    <div style={{ maxWidth: 400, margin: 'auto' }}>\n      <DateTimePicker placeholder=\"Pick date and time\" />\n    </div>\n  );\n}\n"},h={type:"demo",component:function(){return(0,t.jsx)("div",{style:{maxWidth:400,margin:"auto"},children:(0,t.jsx)(o.MG,{label:"Pick time",withSeconds:!0})})},code:"\nimport { TimeInput } from 'mantine-dates-6';\n\nfunction Demo() {\n  return (\n    <div style={{ maxWidth: 400, margin: 'auto' }}>\n      <TimeInput label=\"Pick time\" withSeconds />\n    </div>\n  );\n}\n"}}}]);